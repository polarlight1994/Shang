diff --git a/cmake/modules/LLVMProcessSources.cmake b/cmake/modules/LLVMProcessSources.cmake
index 0e410ed..36c621d 100644
--- a/cmake/modules/LLVMProcessSources.cmake
+++ b/cmake/modules/LLVMProcessSources.cmake
@@ -63,14 +63,27 @@ function(llvm_process_sources OUT_VAR)
       llvm_replace_compiler_option(CMAKE_CXX_FLAGS "/EHsc" "/EHs-c-")
       add_definitions( /D_HAS_EXCEPTIONS=0 )
     endif()
-  endif()
+  else ( NOT LLVM_REQUIRES_EH )
+    if( LLVM_COMPILER_IS_GCC_COMPATIBLE )
+      remove_definitions( -fno-exceptions )
+    elseif( MSVC )
+      llvm_replace_compiler_option(CMAKE_CXX_FLAGS "/EHs-c-" "/EHsc")
+      remove_definitions( /D_HAS_EXCEPTIONS=0 )
+    endif()
+  endif( NOT LLVM_REQUIRES_EH )
   if( NOT LLVM_REQUIRES_RTTI )
     if( LLVM_COMPILER_IS_GCC_COMPATIBLE )
       llvm_replace_compiler_option(CMAKE_CXX_FLAGS "-frtti" "-fno-rtti")
     elseif( MSVC )
       llvm_replace_compiler_option(CMAKE_CXX_FLAGS "/GR" "/GR-")
     endif()
-  endif()
+  else ( NOT LLVM_REQUIRES_RTTI )
+    if( LLVM_COMPILER_IS_GCC_COMPATIBLE )
+      llvm_replace_compiler_option(CMAKE_CXX_FLAGS "-fno-rtti" "-frtti")
+    elseif( MSVC )
+      llvm_replace_compiler_option(CMAKE_CXX_FLAGS "/GR-" "/GR")
+    endif()
+  endif( NOT LLVM_REQUIRES_RTTI )
 
   set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" PARENT_SCOPE )
   set( ${OUT_VAR} ${sources} PARENT_SCOPE )
diff --git a/include/llvm/Instruction.h b/include/llvm/Instruction.h
index a386d1d..f438db3 100644
--- a/include/llvm/Instruction.h
+++ b/include/llvm/Instruction.h
@@ -84,7 +84,7 @@ public:
   const char *getOpcodeName() const { return getOpcodeName(getOpcode()); }
   bool isTerminator() const { return isTerminator(getOpcode()); }
   bool isBinaryOp() const { return isBinaryOp(getOpcode()); }
-  bool isShift() { return isShift(getOpcode()); }
+  bool isShift() const { return isShift(getOpcode()); }
   bool isCast() const { return isCast(getOpcode()); }
   
   static const char* getOpcodeName(unsigned OpCode);
diff --git a/include/llvm/Support/FormattedStream.h b/include/llvm/Support/FormattedStream.h
index 58a1885..ab4cfbe 100644
--- a/include/llvm/Support/FormattedStream.h
+++ b/include/llvm/Support/FormattedStream.h
@@ -33,12 +33,20 @@ namespace llvm
     ///
     static const bool PRESERVE_STREAM = false;
 
-  private:
+  protected:
     /// TheStream - The real stream we output to. We set it to be
     /// unbuffered, since we're already doing our own buffering.
     ///
     raw_ostream *TheStream;
 
+    /// ComputeColumn - Examine the given output buffer and figure out which
+    /// column we end up in after output.
+    ///
+    void ComputeColumn(const char *Ptr, size_t size);
+
+    virtual void write_impl(const char *Ptr, size_t Size);
+
+  private:
     /// DeleteStream - Do we need to delete TheStream in the
     /// destructor?
     ///
@@ -55,8 +63,6 @@ namespace llvm
     ///
     const char *Scanned;
 
-    virtual void write_impl(const char *Ptr, size_t Size);
-
     /// current_pos - Return the current position within the stream,
     /// not counting the bytes currently in the buffer.
     virtual uint64_t current_pos() const { 
@@ -65,11 +71,6 @@ namespace llvm
       return TheStream->tell() - TheStream->GetNumBytesInBuffer();
     }
 
-    /// ComputeColumn - Examine the given output buffer and figure out which
-    /// column we end up in after output.
-    ///
-    void ComputeColumn(const char *Ptr, size_t size);
-
   public:
     /// formatted_raw_ostream - Open the specified file for
     /// writing. If an error occurs, information about the error is
diff --git a/lib/Support/Windows/Path.inc b/lib/Support/Windows/Path.inc
index 2280b34..75a7749 100644
--- a/lib/Support/Windows/Path.inc
+++ b/lib/Support/Windows/Path.inc
@@ -103,7 +103,7 @@ Path::isValid() const {
 
   // Remove trailing slash, unless it's a root slash.
   if (len > rootslash+1 && path[len-1] == '/')
-    path.erase(--len);
+    path.erase(--len, 1);
 
   // Check each component for legality.
   for (pos = 0; pos < len; ++pos) {
diff --git a/lib/Transforms/Scalar/CodeGenPrepare.cpp b/lib/Transforms/Scalar/CodeGenPrepare.cpp
index 24d64b5..9d1c2c0 100644
--- a/lib/Transforms/Scalar/CodeGenPrepare.cpp
+++ b/lib/Transforms/Scalar/CodeGenPrepare.cpp
@@ -1244,7 +1244,7 @@ bool CodeGenPrepare::OptimizeInst(Instruction *I) {
     return DupRetToEnableTailCallOpts(RI);
 
   if (SelectInst *SI = dyn_cast<SelectInst>(I))
-    return OptimizeSelectInst(SI);
+    if (TLI)  return OptimizeSelectInst(SI);
 
   return false;
 }
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 1bfc2fe..c1e9e7b 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -51,5 +51,6 @@ endif()
 add_llvm_external_project(clang)
 add_llvm_external_project(lld)
 add_llvm_external_project(polly)
+add_llvm_external_project(shang)
 
 set(LLVM_COMMON_DEPENDS ${LLVM_COMMON_DEPENDS} PARENT_SCOPE)
