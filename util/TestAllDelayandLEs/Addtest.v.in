`define WIDTH @WIDTH@
`define BIT 1

module @TEST_NAMES@(
  input clk,
  input wire[`WIDTH-1:0] a,
  input wire[`WIDTH-1:0] b,
  input wire[`BIT-1:0] d,
  output reg[`WIDTH:0] c
);

  reg [`WIDTH-1:0] a_reg0;
  reg [`WIDTH-1:0] a_reg1;
  reg [`WIDTH-1:0] b_reg0;
  reg [`WIDTH-1:0] b_reg1;
  reg [`BIT-1:0] d_reg0;
  reg [`BIT-1:0] d_reg1;
  reg [`WIDTH:0] c_reg0;
  wire [`WIDTH:0] c_wire;
  
always@(posedge clk) begin
  a_reg0 <= a;
  a_reg1 <= a_reg0;
  b_reg0 <= b;
  b_reg1 <= b_reg0;
  d_reg0 <= d;
  d_reg1 <= d_reg0;
  c_reg0 <= c_wire;
  c <= c_reg0;
end  

Add i0(
  .a(a_reg1),
  .b(b_reg1),
  .d(d_reg1),
  .c(c_wire)
);

endmodule

module Add(
  input wire[`WIDTH-1:0] a,
  input wire[`WIDTH-1:0] b,
  input wire[`BIT-1:0] d,
  output wire[`WIDTH:0] c
);

assign c = a + b + d;

endmodule
