-- Initialize the global variables.
ptr_size = {{ ptr_size }}
InputFile = [[{{ MAIN_ORIG_BC }}]]
RTLOutput = [[{{ MAIN_RTL_SRC }}]]
MainSDCOutput = [[{{ MAIN_SDC_SRC }}]]
--MainDelayVerifyOutput = [[{{ MAIN_DELAY_VERIFY_SRC }}]]
SoftwareIROutput = [[{{ MAIN_SW_LL }}]]
IFFileName = [[{{ MAIN_IF_SRC }}]]
RTLModuleName = [[{{ MAIN_RTL_ENTITY }}]]
CounterFile = [[{{ CycleCounter }}]]
BenchmarkCycles = [[{{ BenchmarkCyclesTmp }}]]
test_binary_root = [[{{ test_binary_root }}]]

Functions.{{ SYN_FUNC }} = RTLModuleName

local FMAX = {{ FMAX }}
PERIOD = 1000.0 / FMAX
FUs.Period = PERIOD

dofile([[{{ [config_dir, 'common_config.lua']|joinpath }}]])

-- Define some function
dofile([[{{ [config_dir, 'FuncDefine.lua']|joinpath }}]])
dofile([[{{ [config_dir, 'AddModules.lua']|joinpath }}]])
-- load platform information script
dofile([[{{ [config_dir, 'AlteraCommon.lua']|joinpath }}]])
dofile([[{{ [config_dir, 'Altera4LUTFUs.lua']|joinpath }}]])
dofile([[{{ [config_dir, 'EP4CE75F29C6.lua']|joinpath }}]])

-- ExternalTool.Path = [[@QUARTUS_BIN_DIR@/quartus_sh]]

{% if SYN_FUNC == 'main' %}

-- Load ip module and simulation interface script.
dofile([[{{ [config_dir, 'InterfaceGen.lua']|joinpath }}]])
dofile([[{{ [config_dir, 'ModelSimGen.lua']|joinpath }}]])

Misc.RTLGlobalScript = [=[
RTLGlobalCode = FUs.CommonTemplate
]=]

{% else %}

-- Load ip module and simulation interface script.
dofile([[{{ [config_dir, 'SCIfCodegen.lua']|joinpath }}]])

--Code for globalvariable symbols.
RTLGlobalTemplate = [=[
/* verilator lint_off DECLFILENAME */
/* verilator lint_off WIDTH */
/* verilator lint_off UNUSED */

`ifdef quartus_synthesis
// FIXME: Parse the address from the object file.
#local addr = 0

#for k,v in pairs(GlobalVariables) do
`define gv$(k) $(addr)
#addr = addr + 8
#end

`else
#for k,v in pairs(GlobalVariables) do
#if v.AddressSpace == 0 then
import "DPI-C" function chandle vlt_$(escapeNumber(k))();
`define gv$(k) vlt_$(escapeNumber(k))()
#end
#end
`endif
]=]

Misc.RTLGlobalScript = [=[
local preprocess = require "luapp" . preprocess
RTLGlobalCode, message = preprocess {input=RTLGlobalTemplate}
if message ~= nil then print(message) end

RTLGlobalCode = RTLGlobalCode .. FUs.CommonTemplate
]=]
{% endif %}
