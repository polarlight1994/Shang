-- Load bram initfile
local FMAX = @FMAX@
PERIOD = 1000.0 / FMAX
FUs.Period = PERIOD

dofile('@TEST_BINARY_ROOT@/' .. 'common_config.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'EP4CE75F29C6.lua')

Functions.@SYN_FUNC@ = RTLModuleName
-- ExternalTool.Path = [[@QUARTUS_BIN_DIR@/quartus_sh]]

-- Load ip module and simulation interface script.
dofile('@VTS_SOURCE_ROOT@/' .. 'SCIfCodegen.lua')  

--Code for globalvariable symbols.
RTLGlobalTemplate = [=[
/* verilator lint_off DECLFILENAME */
/* verilator lint_off WIDTH */
/* verilator lint_off UNUSED */

`ifdef quartus_synthesis
// FIXME: Parse the address from the object file.
#local addr = 0

#for k,v in pairs(GlobalVariables) do
`define gv$(k) $(addr)
#addr = addr + 8
#end

`else
#for k,v in pairs(GlobalVariables) do
#if v.AddressSpace == 0 then
import "DPI-C" function chandle vlt_$(escapeNumber(k))();
`define gv$(k) vlt_$(escapeNumber(k))()
#end
#end
`endif
]=]

Misc.RTLGlobalScript = [=[
local preprocess = require "luapp" . preprocess
RTLGlobalCode, message = preprocess {input=RTLGlobalTemplate}
if message ~= nil then print(message) end

RTLGlobalCode = RTLGlobalCode .. FUs.CommonTemplate
]=]
