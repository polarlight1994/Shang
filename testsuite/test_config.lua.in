InputFile = [[@MAIN_ORIG_BC@]]
RTLOutput = [[@MAIN_RTL_SRC@]]
MainSDCOutput = [[@MAIN_SDC_SRC@]]
MainSDCOutputX = [[@MAIN_UCF_SRC@]]
SoftwareIROutput = [[@MAIN_SW_LL@]]
IFFileName = [[@MAIN_IF_SRC@]]
RTLModuleName = [[@MAIN_RTL_ENTITY@]]
CounterFile = [[@CycleCounter@]]
BenchmarkCycles = [[@BenchmarkCyclesTmp@]]
test_binary_root = [[@TEST_BINARY_ROOT@]]

local FMAX = @FMAX@
PERIOD = 1000.0 / FMAX

ADDSUB_ChainingThreshold = @ADDSUB_ChainingThreshold@
SHIFT_ChainingThreshold = @SHIFT_ChainingThreshold@
MULT_ChainingThreshold = @MULT_ChainingThreshold@
ICMP_ChainingThreshold = @ICMP_ChainingThreshold@
SEL_ChainingThreshold = -1
REDUCTION_ChainingThreshold = -1
MUX_ChainingThreshold = -1

POINTER_SIZE_IN_BITS = @POINTER_SIZE_IN_BITS@

-- Load bram initfile
dofile('@TEST_BINARY_ROOT@/' .. 'common_config.lua')
-- load platform information script
dofile('@VTS_SOURCE_ROOT@/' .. 'AlteraCommon.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'Altera4LUTFUs.lua')
FUs.LUTDelay = 0.0125 / PERIOD

-- Define some function
dofile('@VTS_SOURCE_ROOT@/' .. 'FuncDefine.lua')

Functions.@SYN_FUNC@ = { ModName = RTLModuleName, Scheduling = SynSettings.@ScheduleType@, Pipeline = SynSettings.@PipelineType@ }

-- Load ip module and simulation interface script.
dofile('@VTS_SOURCE_ROOT@/' .. 'AddModules.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'SCIfCodegen.lua')  

--Code for globalvariable symbols.
RTLGlobalTemplate = [=[
/* verilator lint_off DECLFILENAME */
/* verilator lint_off WIDTH */
/* verilator lint_off UNUSED */

`ifdef quartus_synthesis
// FIXME: Parse the address from the object file.
#local addr = 0

#for k,v in pairs(GlobalVariables) do
`define gv$(k) $(addr)
#addr = addr + 8
#end

`else
#for k,v in pairs(GlobalVariables) do
#if v.AddressSpace == 0 then
import "DPI-C" function chandle vlt_$(escapeNumber(k))();
`define gv$(k) vlt_$(escapeNumber(k))()
#end
#end
`endif
]=]

dofile('@VTS_SOURCE_ROOT@/' .. 'BramGlobVar.lua')
Misc.RTLGlobalScript = Misc.CommonRTLGlobalScript

