InputFile = [[@MAIN_ORIG_BC@]]
RTLOutput = [[@MAIN_RTL_SRC@]]
MainSDCOutput = [[@MAIN_SDC_SRC@]]
SoftwareIROutput = [[@MAIN_SW_LL@]]
IFFileName = [[@MAIN_IF_SRC@]]
RTLModuleName = [[@MAIN_RTL_ENTITY@]]
CounterFile = [[@CycleCounter@]]
BenchmarkCycles = [[@BenchmarkCyclesTmp@]]
test_binary_root = [[@TEST_BINARY_ROOT@]]

ADDSUB_ChainingThreshold = @ADDSUB_ChainingThreshold@
SHIFT_ChainingThreshold = @SHIFT_ChainingThreshold@
MULT_ChainingThreshold = @MULT_ChainingThreshold@
ICMP_ChainingThreshold = @ICMP_ChainingThreshold@
SEL_ChainingThreshold = -1
REDUCTION_ChainingThreshold = -1
MUX_ChainingThreshold = -1

local FMAX = @FMAX@
PERIOD = 1000.0 / FMAX
FUs.Period = PERIOD

POINTER_SIZE_IN_BITS = @POINTER_SIZE_IN_BITS@

FUs.MemoryBus = { ReadLatency = 4, StartInterval=1, AddressWidth=@POINTER_SIZE_IN_BITS@, DataWidth=64 }

-- Please note that the template of the block RAM is provided in <TargetPlatform>Common.lua
FUs.BRam = { StepsToWait =1, StartInterval=1, DataWidth = 64, InitFileDir = [[@TEST_BINARY_ROOT@]] }

FUs.CommonTemplate =[=[

module shang_addc#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  input wire c,
  output wire[C_WIDTH-1:0] d
);
	assign d = a + b + c;
endmodule

module shang_mult#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire[C_WIDTH-1:0] c
);
	assign c = a * b;
endmodule

module shang_shl#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire[C_WIDTH-1:0] c
);
	assign c = a << b;
endmodule

module shang_sra#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire[C_WIDTH-1:0] c
);
	assign c = $signed(a) >> b;
endmodule

module shang_srl#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire[C_WIDTH-1:0] c
);
	assign c = a >> b;
endmodule

module shang_scmp#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire[7:0] c
);
	assign c[7:5] = 3'bx;
	assign c[4] = ($signed(a) >  $signed(b)) ? 1'b1 : 1'b0;
	assign c[3] = ($signed(a) >= $signed(b)) ? 1'b1 : 1'b0;
	assign c[2] = ($signed(a) == $signed(b)) ? 1'b1 : 1'b0;
	assign c[1] = ($signed(a) != $signed(b)) ? 1'b1 : 1'b0;
	assign c[0] = 1'bx;
endmodule

module shang_sgt#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire c
);
	assign c = ($signed(a) >  $signed(b)) ? 1'b1 : 1'b0;
endmodule

module shang_sge#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire c
);
	assign c = ($signed(a) >=  $signed(b)) ? 1'b1 : 1'b0;
endmodule

module shang_ugt#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire c
);
	assign c = (a > b)  ? 1'b1 : 1'b0;
endmodule


module shang_uge#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  output wire c
);
	assign c = (a >= b)  ? 1'b1 : 1'b0;
endmodule

module shang_sel#(parameter A_WIDTH = 0, B_WIDTH = 0, C_WIDTH = 0, D_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  input wire[B_WIDTH-1:0] b,
  input wire c,
  output wire[D_WIDTH-1:0] d
);
	assign d = c ? a : b;
endmodule

module shang_reduction#(parameter A_WIDTH = 0, B_WIDTH = 0) (
  input wire[A_WIDTH-1:0] a,
  output wire b
);
	assign b = &a;
endmodule
]=]

-- Define some function
dofile('@VTS_SOURCE_ROOT@/' .. 'FuncDefine.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'AddModules.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'BramGlobVar.lua')
