; ModuleID = 'sir_mem.c'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S128"
target triple = "i386-pc-linux-gnu"

; Function Attrs: nounwind
define void @sir_memcpy_1(i8* nocapture %d, i8* nocapture readonly %s, i32 %n) #0 {
  %1 = icmp eq i32 %n, 0
  br i1 %1, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %0
  %n.vec = and i32 %n, -32
  %cmp.zero = icmp eq i32 %n.vec, 0
  %2 = add i32 %n, -1
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph.preheader
  %scevgep4 = getelementptr i8* %s, i32 %2
  %scevgep = getelementptr i8* %d, i32 %2
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep4, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i8* %s, i32 %n.vec
  %ptr.ind.end6 = getelementptr i8* %d, i32 %n.vec
  %rev.ind.end = sub i32 %n, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i8* %s, i32 %index
  %next.gep103 = getelementptr i8* %d, i32 %index
  %3 = bitcast i8* %next.gep to <16 x i8>*
  %wide.load = load <16 x i8>* %3, align 1
  %next.gep.sum279 = or i32 %index, 16
  %4 = getelementptr i8* %s, i32 %next.gep.sum279
  %5 = bitcast i8* %4 to <16 x i8>*
  %wide.load200 = load <16 x i8>* %5, align 1
  %6 = bitcast i8* %next.gep103 to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %6, align 1
  %next.gep103.sum296 = or i32 %index, 16
  %7 = getelementptr i8* %d, i32 %next.gep103.sum296
  %8 = bitcast i8* %7 to <16 x i8>*
  store <16 x i8> %wide.load200, <16 x i8>* %8, align 1
  %index.next = add i32 %index, 32
  %9 = icmp eq i32 %index.next, %n.vec
  br i1 %9, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph.preheader
  %resume.val = phi i8* [ %s, %.lr.ph.preheader ], [ %s, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val5 = phi i8* [ %d, %.lr.ph.preheader ], [ %d, %vector.memcheck ], [ %ptr.ind.end6, %vector.body ]
  %resume.val7 = phi i32 [ %n, %.lr.ph.preheader ], [ %n, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph.preheader ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %new.indc.resume.val, %n
  br i1 %cmp.n, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %middle.block, %.lr.ph
  %st.03 = phi i8* [ %11, %.lr.ph ], [ %resume.val, %middle.block ]
  %dt.02 = phi i8* [ %13, %.lr.ph ], [ %resume.val5, %middle.block ]
  %.01 = phi i32 [ %10, %.lr.ph ], [ %resume.val7, %middle.block ]
  %10 = add i32 %.01, -1
  %11 = getelementptr inbounds i8* %st.03, i32 1
  %12 = load i8* %st.03, align 1, !tbaa !1
  %13 = getelementptr inbounds i8* %dt.02, i32 1
  store i8 %12, i8* %dt.02, align 1, !tbaa !1
  %14 = icmp eq i32 %10, 0
  br i1 %14, label %._crit_edge, label %.lr.ph, !llvm.loop !4

._crit_edge:                                      ; preds = %.lr.ph, %middle.block, %0
  ret void
}

; Function Attrs: nounwind
define void @sir_memcpy_2(i8* nocapture %d, i8* nocapture readonly %s, i32 %n) #0 {
  %1 = lshr i32 %n, 1
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %3 = bitcast i8* %s to i16*
  %4 = bitcast i8* %d to i16*
  %5 = lshr i32 %n, 1
  %n.vec = and i32 %5, 2147483640
  %cmp.zero = icmp eq i32 %n.vec, 0
  %6 = shl nuw i32 %5, 1
  %7 = add i32 %6, -2
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph
  %scevgep4 = getelementptr i8* %s, i32 %7
  %scevgep = getelementptr i8* %d, i32 %7
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep4, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i16* %3, i32 %n.vec
  %ptr.ind.end6 = getelementptr i16* %4, i32 %n.vec
  %rev.ind.end = sub i32 %1, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i16* %3, i32 %index
  %next.gep31 = getelementptr i16* %4, i32 %index
  %8 = bitcast i16* %next.gep to <8 x i16>*
  %wide.load = load <8 x i16>* %8, align 2
  %9 = bitcast i16* %next.gep31 to <8 x i16>*
  store <8 x i16> %wide.load, <8 x i16>* %9, align 2
  %index.next = add i32 %index, 8
  %10 = icmp eq i32 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph
  %resume.val = phi i16* [ %3, %.lr.ph ], [ %3, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val5 = phi i16* [ %4, %.lr.ph ], [ %4, %vector.memcheck ], [ %ptr.ind.end6, %vector.body ]
  %resume.val7 = phi i32 [ %1, %.lr.ph ], [ %1, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %5, %new.indc.resume.val
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %st.03 = phi i16* [ %12, %scalar.ph ], [ %resume.val, %middle.block ]
  %dt.02 = phi i16* [ %14, %scalar.ph ], [ %resume.val5, %middle.block ]
  %.01 = phi i32 [ %11, %scalar.ph ], [ %resume.val7, %middle.block ]
  %11 = add i32 %.01, -1
  %12 = getelementptr inbounds i16* %st.03, i32 1
  %13 = load i16* %st.03, align 2, !tbaa !6
  %14 = getelementptr inbounds i16* %dt.02, i32 1
  store i16 %13, i16* %dt.02, align 2, !tbaa !6
  %15 = icmp eq i32 %11, 0
  br i1 %15, label %._crit_edge, label %scalar.ph, !llvm.loop !8

._crit_edge:                                      ; preds = %scalar.ph, %middle.block, %0
  ret void
}

; Function Attrs: nounwind
define void @sir_memcpy_4(i8* nocapture %d, i8* nocapture readonly %s, i32 %n) #0 {
  %1 = lshr i32 %n, 2
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %3 = bitcast i8* %s to i32*
  %4 = bitcast i8* %d to i32*
  %5 = lshr i32 %n, 2
  %n.vec = and i32 %5, 1073741820
  %cmp.zero = icmp eq i32 %n.vec, 0
  %6 = shl nuw i32 %5, 2
  %7 = add i32 %6, -4
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph
  %scevgep4 = getelementptr i8* %s, i32 %7
  %scevgep = getelementptr i8* %d, i32 %7
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep4, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i32* %3, i32 %n.vec
  %ptr.ind.end6 = getelementptr i32* %4, i32 %n.vec
  %rev.ind.end = sub i32 %1, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i32* %3, i32 %index
  %next.gep19 = getelementptr i32* %4, i32 %index
  %8 = bitcast i32* %next.gep to <4 x i32>*
  %wide.load = load <4 x i32>* %8, align 4
  %9 = bitcast i32* %next.gep19 to <4 x i32>*
  store <4 x i32> %wide.load, <4 x i32>* %9, align 4
  %index.next = add i32 %index, 4
  %10 = icmp eq i32 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph
  %resume.val = phi i32* [ %3, %.lr.ph ], [ %3, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val5 = phi i32* [ %4, %.lr.ph ], [ %4, %vector.memcheck ], [ %ptr.ind.end6, %vector.body ]
  %resume.val7 = phi i32 [ %1, %.lr.ph ], [ %1, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %5, %new.indc.resume.val
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %st.03 = phi i32* [ %12, %scalar.ph ], [ %resume.val, %middle.block ]
  %dt.02 = phi i32* [ %14, %scalar.ph ], [ %resume.val5, %middle.block ]
  %.01 = phi i32 [ %11, %scalar.ph ], [ %resume.val7, %middle.block ]
  %11 = add i32 %.01, -1
  %12 = getelementptr inbounds i32* %st.03, i32 1
  %13 = load i32* %st.03, align 4, !tbaa !9
  %14 = getelementptr inbounds i32* %dt.02, i32 1
  store i32 %13, i32* %dt.02, align 4, !tbaa !9
  %15 = icmp eq i32 %11, 0
  br i1 %15, label %._crit_edge, label %scalar.ph, !llvm.loop !11

._crit_edge:                                      ; preds = %scalar.ph, %middle.block, %0
  ret void
}

; Function Attrs: nounwind
define void @sir_memcpy_8(i8* nocapture %d, i8* nocapture readonly %s, i32 %n) #0 {
  %1 = lshr i32 %n, 3
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %3 = bitcast i8* %s to i64*
  %4 = bitcast i8* %d to i64*
  %5 = lshr i32 %n, 3
  %n.vec = and i32 %5, 536870910
  %cmp.zero = icmp eq i32 %n.vec, 0
  %6 = shl nuw i32 %5, 3
  %7 = add i32 %6, -8
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph
  %scevgep4 = getelementptr i8* %s, i32 %7
  %scevgep = getelementptr i8* %d, i32 %7
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep4, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i64* %3, i32 %n.vec
  %ptr.ind.end6 = getelementptr i64* %4, i32 %n.vec
  %rev.ind.end = sub i32 %1, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i64* %3, i32 %index
  %next.gep13 = getelementptr i64* %4, i32 %index
  %8 = bitcast i64* %next.gep to <2 x i64>*
  %wide.load = load <2 x i64>* %8, align 4
  %9 = bitcast i64* %next.gep13 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %9, align 4
  %index.next = add i32 %index, 2
  %10 = icmp eq i32 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph
  %resume.val = phi i64* [ %3, %.lr.ph ], [ %3, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val5 = phi i64* [ %4, %.lr.ph ], [ %4, %vector.memcheck ], [ %ptr.ind.end6, %vector.body ]
  %resume.val7 = phi i32 [ %1, %.lr.ph ], [ %1, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %5, %new.indc.resume.val
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %st.03 = phi i64* [ %12, %scalar.ph ], [ %resume.val, %middle.block ]
  %dt.02 = phi i64* [ %14, %scalar.ph ], [ %resume.val5, %middle.block ]
  %.01 = phi i32 [ %11, %scalar.ph ], [ %resume.val7, %middle.block ]
  %11 = add i32 %.01, -1
  %12 = getelementptr inbounds i64* %st.03, i32 1
  %13 = load i64* %st.03, align 4, !tbaa !12
  %14 = getelementptr inbounds i64* %dt.02, i32 1
  store i64 %13, i64* %dt.02, align 4, !tbaa !12
  %15 = icmp eq i32 %11, 0
  br i1 %15, label %._crit_edge, label %scalar.ph, !llvm.loop !14

._crit_edge:                                      ; preds = %scalar.ph, %middle.block, %0
  ret void
}

; Function Attrs: nounwind
define void @sir_memmove_1(i8* %d, i8* readonly %s, i32 %n) #0 {
  %1 = icmp ult i8* %d, %s
  br i1 %1, label %.preheader, label %16

.preheader:                                       ; preds = %0
  %2 = icmp eq i32 %n, 0
  br i1 %2, label %.loopexit, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.preheader
  %n.vec = and i32 %n, -32
  %cmp.zero = icmp eq i32 %n.vec, 0
  %3 = add i32 %n, -1
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph.preheader
  %scevgep12 = getelementptr i8* %s, i32 %3
  %scevgep = getelementptr i8* %d, i32 %3
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep12, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i8* %s, i32 %n.vec
  %ptr.ind.end14 = getelementptr i8* %d, i32 %n.vec
  %rev.ind.end = sub i32 %n, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i8* %s, i32 %index
  %next.gep111 = getelementptr i8* %d, i32 %index
  %4 = bitcast i8* %next.gep to <16 x i8>*
  %wide.load = load <16 x i8>* %4, align 1
  %next.gep.sum287 = or i32 %index, 16
  %5 = getelementptr i8* %s, i32 %next.gep.sum287
  %6 = bitcast i8* %5 to <16 x i8>*
  %wide.load208 = load <16 x i8>* %6, align 1
  %7 = bitcast i8* %next.gep111 to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %7, align 1
  %next.gep111.sum304 = or i32 %index, 16
  %8 = getelementptr i8* %d, i32 %next.gep111.sum304
  %9 = bitcast i8* %8 to <16 x i8>*
  store <16 x i8> %wide.load208, <16 x i8>* %9, align 1
  %index.next = add i32 %index, 32
  %10 = icmp eq i32 %index.next, %n.vec
  br i1 %10, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph.preheader
  %resume.val = phi i8* [ %s, %.lr.ph.preheader ], [ %s, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val13 = phi i8* [ %d, %.lr.ph.preheader ], [ %d, %vector.memcheck ], [ %ptr.ind.end14, %vector.body ]
  %resume.val15 = phi i32 [ %n, %.lr.ph.preheader ], [ %n, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph.preheader ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %new.indc.resume.val, %n
  br i1 %cmp.n, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %middle.block, %.lr.ph
  %st.05 = phi i8* [ %12, %.lr.ph ], [ %resume.val, %middle.block ]
  %dt.04 = phi i8* [ %14, %.lr.ph ], [ %resume.val13, %middle.block ]
  %.03 = phi i32 [ %11, %.lr.ph ], [ %resume.val15, %middle.block ]
  %11 = add i32 %.03, -1
  %12 = getelementptr inbounds i8* %st.05, i32 1
  %13 = load i8* %st.05, align 1, !tbaa !1
  %14 = getelementptr inbounds i8* %dt.04, i32 1
  store i8 %13, i8* %dt.04, align 1, !tbaa !1
  %15 = icmp eq i32 %11, 0
  br i1 %15, label %.loopexit, label %.lr.ph, !llvm.loop !15

; <label>:16                                      ; preds = %0
  %17 = icmp ule i8* %d, %s
  %18 = icmp eq i32 %n, 0
  %or.cond = or i1 %17, %18
  br i1 %or.cond, label %.loopexit, label %.lr.ph10

.lr.ph10:                                         ; preds = %16
  %19 = getelementptr inbounds i8* %s, i32 %n
  %20 = getelementptr inbounds i8* %d, i32 %n
  br label %21

; <label>:21                                      ; preds = %.lr.ph10, %21
  %st2.09 = phi i8* [ %19, %.lr.ph10 ], [ %23, %21 ]
  %dt1.08 = phi i8* [ %20, %.lr.ph10 ], [ %25, %21 ]
  %.17 = phi i32 [ %n, %.lr.ph10 ], [ %22, %21 ]
  %22 = add i32 %.17, -1
  %23 = getelementptr inbounds i8* %st2.09, i32 -1
  %24 = load i8* %23, align 1, !tbaa !1
  %25 = getelementptr inbounds i8* %dt1.08, i32 -1
  store i8 %24, i8* %25, align 1, !tbaa !1
  %26 = icmp eq i32 %22, 0
  br i1 %26, label %.loopexit, label %21

.loopexit:                                        ; preds = %21, %.lr.ph, %middle.block, %16, %.preheader
  ret void
}

; Function Attrs: nounwind
define void @sir_memmove_2(i8* %d, i8* readonly %s, i32 %n) #0 {
  %1 = icmp ult i8* %d, %s
  br i1 %1, label %2, label %18

; <label>:2                                       ; preds = %0
  %3 = lshr i32 %n, 1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %2
  %5 = bitcast i8* %s to i16*
  %6 = bitcast i8* %d to i16*
  %7 = lshr i32 %n, 1
  %n.vec = and i32 %7, 2147483640
  %cmp.zero = icmp eq i32 %n.vec, 0
  %8 = shl nuw i32 %7, 1
  %9 = add i32 %8, -2
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph
  %scevgep12 = getelementptr i8* %s, i32 %9
  %scevgep = getelementptr i8* %d, i32 %9
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep12, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i16* %5, i32 %n.vec
  %ptr.ind.end14 = getelementptr i16* %6, i32 %n.vec
  %rev.ind.end = sub i32 %3, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i16* %5, i32 %index
  %next.gep39 = getelementptr i16* %6, i32 %index
  %10 = bitcast i16* %next.gep to <8 x i16>*
  %wide.load = load <8 x i16>* %10, align 2
  %11 = bitcast i16* %next.gep39 to <8 x i16>*
  store <8 x i16> %wide.load, <8 x i16>* %11, align 2
  %index.next = add i32 %index, 8
  %12 = icmp eq i32 %index.next, %n.vec
  br i1 %12, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph
  %resume.val = phi i16* [ %5, %.lr.ph ], [ %5, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val13 = phi i16* [ %6, %.lr.ph ], [ %6, %vector.memcheck ], [ %ptr.ind.end14, %vector.body ]
  %resume.val15 = phi i32 [ %3, %.lr.ph ], [ %3, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %7, %new.indc.resume.val
  br i1 %cmp.n, label %.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %st.05 = phi i16* [ %14, %scalar.ph ], [ %resume.val, %middle.block ]
  %dt.04 = phi i16* [ %16, %scalar.ph ], [ %resume.val13, %middle.block ]
  %.03 = phi i32 [ %13, %scalar.ph ], [ %resume.val15, %middle.block ]
  %13 = add i32 %.03, -1
  %14 = getelementptr inbounds i16* %st.05, i32 1
  %15 = load i16* %st.05, align 2, !tbaa !6
  %16 = getelementptr inbounds i16* %dt.04, i32 1
  store i16 %15, i16* %dt.04, align 2, !tbaa !6
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %.loopexit, label %scalar.ph, !llvm.loop !16

; <label>:18                                      ; preds = %0
  %19 = icmp ugt i8* %d, %s
  br i1 %19, label %20, label %.loopexit

; <label>:20                                      ; preds = %18
  %21 = lshr i32 %n, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %.loopexit, label %.lr.ph10

.lr.ph10:                                         ; preds = %20
  %23 = bitcast i8* %s to i16*
  %24 = bitcast i8* %d to i16*
  %25 = getelementptr inbounds i16* %23, i32 %21
  %26 = getelementptr inbounds i16* %24, i32 %21
  br label %27

; <label>:27                                      ; preds = %.lr.ph10, %27
  %st2.09 = phi i16* [ %25, %.lr.ph10 ], [ %29, %27 ]
  %dt1.08 = phi i16* [ %26, %.lr.ph10 ], [ %31, %27 ]
  %.17 = phi i32 [ %21, %.lr.ph10 ], [ %28, %27 ]
  %28 = add i32 %.17, -1
  %29 = getelementptr inbounds i16* %st2.09, i32 -1
  %30 = load i16* %29, align 2, !tbaa !6
  %31 = getelementptr inbounds i16* %dt1.08, i32 -1
  store i16 %30, i16* %31, align 2, !tbaa !6
  %32 = icmp eq i32 %28, 0
  br i1 %32, label %.loopexit, label %27

.loopexit:                                        ; preds = %27, %scalar.ph, %middle.block, %20, %2, %18
  ret void
}

; Function Attrs: nounwind
define void @sir_memmove_4(i8* %d, i8* readonly %s, i32 %n) #0 {
  %1 = icmp ult i8* %d, %s
  br i1 %1, label %2, label %18

; <label>:2                                       ; preds = %0
  %3 = lshr i32 %n, 2
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %2
  %5 = bitcast i8* %s to i32*
  %6 = bitcast i8* %d to i32*
  %7 = lshr i32 %n, 2
  %n.vec = and i32 %7, 1073741820
  %cmp.zero = icmp eq i32 %n.vec, 0
  %8 = shl nuw i32 %7, 2
  %9 = add i32 %8, -4
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph
  %scevgep12 = getelementptr i8* %s, i32 %9
  %scevgep = getelementptr i8* %d, i32 %9
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep12, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i32* %5, i32 %n.vec
  %ptr.ind.end14 = getelementptr i32* %6, i32 %n.vec
  %rev.ind.end = sub i32 %3, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i32* %5, i32 %index
  %next.gep27 = getelementptr i32* %6, i32 %index
  %10 = bitcast i32* %next.gep to <4 x i32>*
  %wide.load = load <4 x i32>* %10, align 4
  %11 = bitcast i32* %next.gep27 to <4 x i32>*
  store <4 x i32> %wide.load, <4 x i32>* %11, align 4
  %index.next = add i32 %index, 4
  %12 = icmp eq i32 %index.next, %n.vec
  br i1 %12, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph
  %resume.val = phi i32* [ %5, %.lr.ph ], [ %5, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val13 = phi i32* [ %6, %.lr.ph ], [ %6, %vector.memcheck ], [ %ptr.ind.end14, %vector.body ]
  %resume.val15 = phi i32 [ %3, %.lr.ph ], [ %3, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %7, %new.indc.resume.val
  br i1 %cmp.n, label %.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %st.05 = phi i32* [ %14, %scalar.ph ], [ %resume.val, %middle.block ]
  %dt.04 = phi i32* [ %16, %scalar.ph ], [ %resume.val13, %middle.block ]
  %.03 = phi i32 [ %13, %scalar.ph ], [ %resume.val15, %middle.block ]
  %13 = add i32 %.03, -1
  %14 = getelementptr inbounds i32* %st.05, i32 1
  %15 = load i32* %st.05, align 4, !tbaa !9
  %16 = getelementptr inbounds i32* %dt.04, i32 1
  store i32 %15, i32* %dt.04, align 4, !tbaa !9
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %.loopexit, label %scalar.ph, !llvm.loop !17

; <label>:18                                      ; preds = %0
  %19 = icmp ugt i8* %d, %s
  br i1 %19, label %20, label %.loopexit

; <label>:20                                      ; preds = %18
  %21 = lshr i32 %n, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %.loopexit, label %.lr.ph10

.lr.ph10:                                         ; preds = %20
  %23 = bitcast i8* %s to i32*
  %24 = bitcast i8* %d to i32*
  %25 = getelementptr inbounds i32* %23, i32 %21
  %26 = getelementptr inbounds i32* %24, i32 %21
  br label %27

; <label>:27                                      ; preds = %.lr.ph10, %27
  %st2.09 = phi i32* [ %25, %.lr.ph10 ], [ %29, %27 ]
  %dt1.08 = phi i32* [ %26, %.lr.ph10 ], [ %31, %27 ]
  %.17 = phi i32 [ %21, %.lr.ph10 ], [ %28, %27 ]
  %28 = add i32 %.17, -1
  %29 = getelementptr inbounds i32* %st2.09, i32 -1
  %30 = load i32* %29, align 4, !tbaa !9
  %31 = getelementptr inbounds i32* %dt1.08, i32 -1
  store i32 %30, i32* %31, align 4, !tbaa !9
  %32 = icmp eq i32 %28, 0
  br i1 %32, label %.loopexit, label %27

.loopexit:                                        ; preds = %27, %scalar.ph, %middle.block, %20, %2, %18
  ret void
}

; Function Attrs: nounwind
define void @sir_memmove_8(i8* %d, i8* readonly %s, i32 %n) #0 {
  %1 = icmp ult i8* %d, %s
  br i1 %1, label %2, label %18

; <label>:2                                       ; preds = %0
  %3 = lshr i32 %n, 3
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %2
  %5 = bitcast i8* %s to i64*
  %6 = bitcast i8* %d to i64*
  %7 = lshr i32 %n, 3
  %n.vec = and i32 %7, 536870910
  %cmp.zero = icmp eq i32 %n.vec, 0
  %8 = shl nuw i32 %7, 3
  %9 = add i32 %8, -8
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %.lr.ph
  %scevgep12 = getelementptr i8* %s, i32 %9
  %scevgep = getelementptr i8* %d, i32 %9
  %bound1 = icmp uge i8* %scevgep, %s
  %bound0 = icmp uge i8* %scevgep12, %d
  %memcheck.conflict = and i1 %bound0, %bound1
  %ptr.ind.end = getelementptr i64* %5, i32 %n.vec
  %ptr.ind.end14 = getelementptr i64* %6, i32 %n.vec
  %rev.ind.end = sub i32 %3, %n.vec
  br i1 %memcheck.conflict, label %middle.block, label %vector.body

vector.body:                                      ; preds = %vector.memcheck, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.memcheck ]
  %next.gep = getelementptr i64* %5, i32 %index
  %next.gep21 = getelementptr i64* %6, i32 %index
  %10 = bitcast i64* %next.gep to <2 x i64>*
  %wide.load = load <2 x i64>* %10, align 4
  %11 = bitcast i64* %next.gep21 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %11, align 4
  %index.next = add i32 %index, 2
  %12 = icmp eq i32 %index.next, %n.vec
  br i1 %12, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %vector.memcheck, %.lr.ph
  %resume.val = phi i64* [ %5, %.lr.ph ], [ %5, %vector.memcheck ], [ %ptr.ind.end, %vector.body ]
  %resume.val13 = phi i64* [ %6, %.lr.ph ], [ %6, %vector.memcheck ], [ %ptr.ind.end14, %vector.body ]
  %resume.val15 = phi i32 [ %3, %.lr.ph ], [ %3, %vector.memcheck ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ 0, %vector.memcheck ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %7, %new.indc.resume.val
  br i1 %cmp.n, label %.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %st.05 = phi i64* [ %14, %scalar.ph ], [ %resume.val, %middle.block ]
  %dt.04 = phi i64* [ %16, %scalar.ph ], [ %resume.val13, %middle.block ]
  %.03 = phi i32 [ %13, %scalar.ph ], [ %resume.val15, %middle.block ]
  %13 = add i32 %.03, -1
  %14 = getelementptr inbounds i64* %st.05, i32 1
  %15 = load i64* %st.05, align 4, !tbaa !12
  %16 = getelementptr inbounds i64* %dt.04, i32 1
  store i64 %15, i64* %dt.04, align 4, !tbaa !12
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %.loopexit, label %scalar.ph, !llvm.loop !18

; <label>:18                                      ; preds = %0
  %19 = icmp ugt i8* %d, %s
  br i1 %19, label %20, label %.loopexit

; <label>:20                                      ; preds = %18
  %21 = lshr i32 %n, 3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %.loopexit, label %.lr.ph10

.lr.ph10:                                         ; preds = %20
  %23 = bitcast i8* %s to i64*
  %24 = bitcast i8* %d to i64*
  %25 = getelementptr inbounds i64* %23, i32 %21
  %26 = getelementptr inbounds i64* %24, i32 %21
  br label %27

; <label>:27                                      ; preds = %.lr.ph10, %27
  %st2.09 = phi i64* [ %25, %.lr.ph10 ], [ %29, %27 ]
  %dt1.08 = phi i64* [ %26, %.lr.ph10 ], [ %31, %27 ]
  %.17 = phi i32 [ %21, %.lr.ph10 ], [ %28, %27 ]
  %28 = add i32 %.17, -1
  %29 = getelementptr inbounds i64* %st2.09, i32 -1
  %30 = load i64* %29, align 4, !tbaa !12
  %31 = getelementptr inbounds i64* %dt1.08, i32 -1
  store i64 %30, i64* %31, align 4, !tbaa !12
  %32 = icmp eq i32 %28, 0
  br i1 %32, label %.loopexit, label %27

.loopexit:                                        ; preds = %27, %scalar.ph, %middle.block, %20, %2, %18
  ret void
}

; Function Attrs: nounwind
define void @sir_memset_1(i8* nocapture %m, i8 zeroext %c1, i32 %n) #0 {
  %1 = icmp eq i32 %n, 0
  br i1 %1, label %2, label %.lr.ph

.lr.ph:                                           ; preds = %0
  call void @llvm.memset.p0i8.i32(i8* %m, i8 %c1, i32 %n, i32 1, i1 false)
  br label %2

; <label>:2                                       ; preds = %.lr.ph, %0
  ret void
}

; Function Attrs: nounwind
define void @sir_memset_2(i8* nocapture %m, i8 zeroext %c1, i32 %n) #0 {
  %1 = zext i8 %c1 to i32
  %2 = shl nuw nsw i32 %1, 8
  %3 = or i32 %2, %1
  %4 = trunc i32 %3 to i16
  %5 = lshr i32 %n, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %7 = bitcast i8* %m to i16*
  %8 = lshr i32 %n, 1
  %n.vec = and i32 %8, 2147483632
  %cmp.zero = icmp eq i32 %n.vec, 0
  %ptr.ind.end = getelementptr i16* %7, i32 %n.vec
  %rev.ind.end = sub i32 %5, %n.vec
  br i1 %cmp.zero, label %middle.block, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %broadcast.splatinsert51 = insertelement <8 x i16> undef, i16 %4, i32 0
  %broadcast.splat52 = shufflevector <8 x i16> %broadcast.splatinsert51, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i32 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %next.gep = getelementptr i16* %7, i32 %index
  %9 = bitcast i16* %next.gep to <8 x i16>*
  store <8 x i16> %broadcast.splat52, <8 x i16>* %9, align 2
  %next.gep.sum76 = or i32 %index, 8
  %10 = getelementptr i16* %7, i32 %next.gep.sum76
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> %broadcast.splat52, <8 x i16>* %11, align 2
  %index.next = add i32 %index, 16
  %12 = icmp eq i32 %index.next, %n.vec
  br i1 %12, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %.lr.ph
  %resume.val = phi i16* [ %7, %.lr.ph ], [ %ptr.ind.end, %vector.body ]
  %resume.val3 = phi i32 [ %5, %.lr.ph ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %8, %new.indc.resume.val
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %s.02 = phi i16* [ %14, %scalar.ph ], [ %resume.val, %middle.block ]
  %.01 = phi i32 [ %13, %scalar.ph ], [ %resume.val3, %middle.block ]
  %13 = add i32 %.01, -1
  %14 = getelementptr inbounds i16* %s.02, i32 1
  store i16 %4, i16* %s.02, align 2, !tbaa !6
  %15 = icmp eq i32 %13, 0
  br i1 %15, label %._crit_edge, label %scalar.ph, !llvm.loop !19

._crit_edge:                                      ; preds = %scalar.ph, %middle.block, %0
  ret void
}

; Function Attrs: nounwind
define void @sir_memset_4(i8* nocapture %m, i8 zeroext %c1, i32 %n) #0 {
  %1 = zext i8 %c1 to i32
  %2 = shl nuw nsw i32 %1, 8
  %3 = or i32 %2, %1
  %4 = shl nuw i32 %3, 16
  %5 = or i32 %4, %3
  %6 = lshr i32 %n, 2
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %8 = bitcast i8* %m to i32*
  %9 = lshr i32 %n, 2
  %n.vec = and i32 %9, 1073741816
  %cmp.zero = icmp eq i32 %n.vec, 0
  %ptr.ind.end = getelementptr i32* %8, i32 %n.vec
  %rev.ind.end = sub i32 %6, %n.vec
  br i1 %cmp.zero, label %middle.block, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %broadcast.splatinsert27 = insertelement <4 x i32> undef, i32 %5, i32 0
  %broadcast.splat28 = shufflevector <4 x i32> %broadcast.splatinsert27, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i32 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %next.gep = getelementptr i32* %8, i32 %index
  %10 = bitcast i32* %next.gep to <4 x i32>*
  store <4 x i32> %broadcast.splat28, <4 x i32>* %10, align 4
  %next.gep.sum40 = or i32 %index, 4
  %11 = getelementptr i32* %8, i32 %next.gep.sum40
  %12 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> %broadcast.splat28, <4 x i32>* %12, align 4
  %index.next = add i32 %index, 8
  %13 = icmp eq i32 %index.next, %n.vec
  br i1 %13, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %.lr.ph
  %resume.val = phi i32* [ %8, %.lr.ph ], [ %ptr.ind.end, %vector.body ]
  %resume.val3 = phi i32 [ %6, %.lr.ph ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %9, %new.indc.resume.val
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %s.02 = phi i32* [ %15, %scalar.ph ], [ %resume.val, %middle.block ]
  %.01 = phi i32 [ %14, %scalar.ph ], [ %resume.val3, %middle.block ]
  %14 = add i32 %.01, -1
  %15 = getelementptr inbounds i32* %s.02, i32 1
  store i32 %5, i32* %s.02, align 4, !tbaa !9
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %._crit_edge, label %scalar.ph, !llvm.loop !20

._crit_edge:                                      ; preds = %scalar.ph, %middle.block, %0
  ret void
}

; Function Attrs: nounwind
define void @sir_memset_8(i8* nocapture %m, i8 zeroext %c1, i32 %n) #0 {
  %1 = zext i8 %c1 to i64
  %2 = shl nuw nsw i64 %1, 8
  %3 = or i64 %2, %1
  %4 = shl nuw nsw i64 %3, 16
  %5 = or i64 %4, %3
  %6 = shl nuw i64 %5, 32
  %7 = or i64 %6, %5
  %8 = lshr i32 %n, 3
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %10 = bitcast i8* %m to i64*
  %11 = lshr i32 %n, 3
  %n.vec = and i32 %11, 536870908
  %cmp.zero = icmp eq i32 %n.vec, 0
  %ptr.ind.end = getelementptr i64* %10, i32 %n.vec
  %rev.ind.end = sub i32 %8, %n.vec
  br i1 %cmp.zero, label %middle.block, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %broadcast.splatinsert15 = insertelement <2 x i64> undef, i64 %7, i32 0
  %broadcast.splat16 = shufflevector <2 x i64> %broadcast.splatinsert15, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i32 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %next.gep = getelementptr i64* %10, i32 %index
  %12 = bitcast i64* %next.gep to <2 x i64>*
  store <2 x i64> %broadcast.splat16, <2 x i64>* %12, align 4
  %next.gep.sum22 = or i32 %index, 2
  %13 = getelementptr i64* %10, i32 %next.gep.sum22
  %14 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> %broadcast.splat16, <2 x i64>* %14, align 4
  %index.next = add i32 %index, 4
  %15 = icmp eq i32 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body, %.lr.ph
  %resume.val = phi i64* [ %10, %.lr.ph ], [ %ptr.ind.end, %vector.body ]
  %resume.val3 = phi i32 [ %8, %.lr.ph ], [ %rev.ind.end, %vector.body ]
  %new.indc.resume.val = phi i32 [ 0, %.lr.ph ], [ %n.vec, %vector.body ]
  %cmp.n = icmp eq i32 %11, %new.indc.resume.val
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %scalar.ph
  %s.02 = phi i64* [ %17, %scalar.ph ], [ %resume.val, %middle.block ]
  %.01 = phi i32 [ %16, %scalar.ph ], [ %resume.val3, %middle.block ]
  %16 = add i32 %.01, -1
  %17 = getelementptr inbounds i64* %s.02, i32 1
  store i64 %7, i64* %s.02, align 4, !tbaa !12
  %18 = icmp eq i32 %16, 0
  br i1 %18, label %._crit_edge, label %scalar.ph, !llvm.loop !21

._crit_edge:                                      ; preds = %scalar.ph, %middle.block, %0
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #1

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.4 "}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"omnipotent char", metadata !3, i64 0}
!3 = metadata !{metadata !"Simple C/C++ TBAA"}
!4 = metadata !{metadata !4, metadata !5}
!5 = metadata !{metadata !"llvm.vectorizer.width", i32 1}
!6 = metadata !{metadata !7, metadata !7, i64 0}
!7 = metadata !{metadata !"short", metadata !2, i64 0}
!8 = metadata !{metadata !8, metadata !5}
!9 = metadata !{metadata !10, metadata !10, i64 0}
!10 = metadata !{metadata !"int", metadata !2, i64 0}
!11 = metadata !{metadata !11, metadata !5}
!12 = metadata !{metadata !13, metadata !13, i64 0}
!13 = metadata !{metadata !"long long", metadata !2, i64 0}
!14 = metadata !{metadata !14, metadata !5}
!15 = metadata !{metadata !15, metadata !5}
!16 = metadata !{metadata !16, metadata !5}
!17 = metadata !{metadata !17, metadata !5}
!18 = metadata !{metadata !18, metadata !5}
!19 = metadata !{metadata !19, metadata !5}
!20 = metadata !{metadata !20, metadata !5}
!21 = metadata !{metadata !21, metadata !5}
