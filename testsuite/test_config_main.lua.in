INTFFILE = [[@MAIN_INT_TOP@]]
BRAMFILE = [[@MAIN_INT_BRAM@]]
BRAMXILINXFILE = [[@MAIN_INT_BRAM_XILINX@]]
XILINXTCL = [[@MAIN_XILINX_TCL@]]
XILINXBINDIR = [[@XILINX_BIN_DIR@]]
BRAMINIT = [[@MAIN_INT_BRAMINIT@]]
MODELDOFILE = [[@MAIN_MODELDO_FILE@]]
TBFILE = [[@MAIN_TB_FILE@]]

-- Load bram initfile
ExternalTool.Path = [[@QUARTUS_BIN_DIR@/quartus_sh]]

dofile('@TEST_BINARY_ROOT@/' .. 'common_config.lua')
-- load platform information script
dofile('@VTS_SOURCE_ROOT@/' .. 'AlteraCommon.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'Altera4LUTFUs.lua')
FUs.LUTDelay = 0.2 / PERIOD
-- Enable simple dual-port mode
FUs.BRam.Mode = 1

Functions.main = { ModName = RTLModuleName, Scheduling = SynSettings.@ScheduleType@, Pipeline = SynSettings.@PipelineType@ }

-- Load ip module and simulation interface script.
dofile('@VTS_SOURCE_ROOT@/' .. 'BramMIFGen.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'InterfaceGen.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'ModelSimGen.lua')

-- Code for globalvariable symbols.
RTLGlobalTemplate = [=[
/* verilator lint_off DECLFILENAME */
/* verilator lint_off WIDTH */
/* verilator lint_off UNUSED */

`ifdef quartus_synthesis
#local table_size = # table_name
#for i = 1, table_size do
#_put('\`define gv')
#_put(table_name[i])
#_put(' 32\'d')
#_put((table_num[i])*8)
#_put('\n')
#end

`else
#for k,v in pairs(GlobalVariables) do
#if v.AddressSpace == 0 then
import "DPI-C" function chandle vlt_$(escapeNumber(k))();
`define gv$(k) vlt_$(escapeNumber(k))()
#end
#end
`endif
]=]

Misc.MainSynthesisRTLGlobalScript = [=[
table_name = {}
table_num = {}
LineTotal = {}
local BramInitFile = assert(io.open (BRAMINIT, "w+"))
local preprocess = require "luapp" . preprocess
local _, message = preprocess {input=BlockRAMInitFileGenScript, output=BramInitFile}
if message ~= nil then print(message) end
BramInitFile:close()
]=]

Misc.RTLGlobalScript = Misc.MainSynthesisRTLGlobalScript .. Misc.CommonRTLGlobalScript
